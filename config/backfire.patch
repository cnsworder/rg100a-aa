Index: package/block-mount/files/55_determine_extroot_sysupgrade
===================================================================
--- package/block-mount/files/55_determine_extroot_sysupgrade	(revision 0)
+++ package/block-mount/files/55_determine_extroot_sysupgrade	(revision 0)
@@ -0,0 +1,63 @@
+#!/bin/sh
+# Copyright (C) 2010 Daniel Dickinson
+# This is free software, licensed under the GNU General Public License v2.
+# See /LICENSE for more information.
+
+
+check_set_md5sum() {
+	local er_md5sum_file
+	er_md5sum_file="${ER_OVERLAY_PREFIX}/.extroot.md5sum"
+	local er_disabled
+	if [ "${ER_OVERLAY_ROM}" = "/rom" ]; then
+		er_disabled=/tmp/whole_root-disabled
+	else
+		er_disabled=/tmp${ER_OVERLAY_ROM}-disabled
+	fi
+
+	local er_extroot_md5sum
+	if [ -f $md5sum_file ]; then
+		er_extroot_md5sum="$(cat $er_md5sum_file)"
+	fi
+
+	local er_overlay_file="${ER_OVERLAY_ROM}/etc/extroot.md5sum"
+
+	local er_extroot_overlay_md5sum
+	if [ -f "$er_overlay_file" ]; then
+		er_extroot_overlay_md5sum="$(cat $er_overlay_file)"
+	fi
+
+	if [ -z "$er_extroot_overlay_md5sum" ]; then
+		cat $er_md5sum_file >$er_overlay_file
+	elif [ "$er_extroot_overlay_md5sum" != "$er_extroot_md5sum" ]; then
+		pi_extroot_mount_success="false"
+		mkdir -p $er_disabled
+		mount --move ${ER_OVERLAY_ROM} $er_disabled
+	fi
+}
+
+set_jffs_md5sum() {
+	# We do this anytime block-extroot exists, even on the first boot with
+	# no extroot defined.
+
+	local er_md5sum_file
+	er_md5sum_file="${ER_OVERLAY_PREFIX}/.extroot.md5sum"
+
+	local er_extroot_md5sum
+	if [ -f $er_md5sum_file ]; then
+		er_extroot_md5sum="$(cat $er_md5sum_file)"
+	fi
+	if [ -z "$er_extroot_md5sum" ]; then
+		dd if=/dev/urandom count=32 bs=1k 2>/dev/null | md5sum | cut -f1 -d\  >$er_md5sum_file
+	fi
+}
+
+determine_extroot_sysupgrade() {
+	check_skip || set_jffs_md5sum
+
+	check_skip || [ "$pi_extroot_mount_success" != "true" ] || {
+		check_set_md5sum
+	}
+}
+
+boot_hook_add preinit_mount_root determine_extroot_sysupgrade
+
Index: package/block-mount/files/fstab.init
===================================================================
--- package/block-mount/files/fstab.init	(revision 27608)
+++ package/block-mount/files/fstab.init	(working copy)
@@ -8,6 +8,31 @@
 
 START=20
 
+EXTRA_COMMANDS="overlay_enable whole_root_enable"
+EXTRA_HELP="        overlay_enable    Reenable overlay rootfs. (After you fix it).
+        whole_root_enable Reenable whole-disk rootfs.  (After you fix it)."
+
+rootfs_enable() {
+	local extroot_type="$1"
+		
+	if [ ! -d /tmp/${extroot_type}-disabled ]; then
+		echo "No disabled ${extroot_type} present (/tmp/${extroot_type}-disabled).  Can't renable."
+		exit 1
+	fi
+	
+	rm -f /tmp/${extroot_type}-disabled/.extroot.md5sum
+	rm -f /tmp/${extroot_type}-disabled/etc/extroot.md5sum
+	echo "Please reboot router to complete re-enabling external rootfs."
+}
+
+overlay_enable() {
+	rootfs_enable overlay
+}
+
+whole_root_enable() {
+	rootfs_enable whole_root
+}
+
 do_mount() {
 	local cfg="$1"
 	config_mount_by_section "$cfg"
Index: package/block-mount/files/60_pivot_usb_root
===================================================================
--- package/block-mount/files/60_pivot_usb_root	(revision 0)
+++ package/block-mount/files/60_pivot_usb_root	(revision 0)
@@ -0,0 +1,27 @@
+#!/bin/sh
+# Copyright (C) 2010 Vertical Communications
+
+# This is free software, licensed under the GNU General Public License v2.
+# See /LICENSE for more information.
+
+# Determine if we are requested to mount external root
+
+external_root_pivot() {
+	check_skip || [ "$pi_extroot_mount_success" != "true" ] || {
+		echo "switching to external rootfs"
+		if [ "$ER_OVERLAY_ROM" = "/overlay" ]; then
+			if [ "$ER_IS_SQUASHFS" = "true" ]; then
+				umount /tmp/overlay
+			fi
+			mount -o remount,ro / && fopivot /overlay /rom && pi_mount_skip_next=true
+		elif [ "$ER_OVERLAY_ROM" = "/rom" ]; then
+			if [ "$ER_IS_SQUASHFS" = "true" ]; then
+				umount /tmp/overlay
+			fi
+			mount -o remount,ro / && pivot_rom /rom /rom && pi_mount_skip_next=true
+		fi
+	}
+}
+
+boot_hook_add preinit_mount_root external_root_pivot
+
Index: package/block-mount/files/fstab.config
===================================================================
--- package/block-mount/files/fstab.config	(revision 27608)
+++ package/block-mount/files/fstab.config	(working copy)
@@ -9,7 +9,7 @@
 config mount
 	option target	/home
 	option device	/dev/sda1
-	option fstype	ext3
+	option fstype	ext4
 	option options	rw,sync
 	option enabled	0
 	option enabled_fsck 0
Index: package/block-mount/files/extroot
===================================================================
--- package/block-mount/files/extroot	(revision 0)
+++ package/block-mount/files/extroot	(revision 0)
@@ -0,0 +1,2 @@
+config extroot
+	option settle_time	20
Index: package/block-mount/files/mount.sh
===================================================================
--- package/block-mount/files/mount.sh	(revision 27608)
+++ package/block-mount/files/mount.sh	(working copy)
@@ -7,6 +7,7 @@
 
 pi_include /lib/functions/block.sh
 pi_include /lib/functions/fsck.sh
+pi_include /lib/functions/filesystem.sh
 
 config_mount_by_section() {
 	local cfg="$1"
@@ -31,16 +32,32 @@
 		
 		found_device="$(libmount_find_device_by_id "$uuid" "$label" "$device" "$cfgdevice")"
 		if [ -n "$found_device" ]; then
-			if [ -z "$find_rootfs" ] || [ "$find_rootfs" -eq 0 ] || [ "$is_rootfs" -eq 1 ]; then
+			if [ "$find_rootfs" != "1" ] || ( [ "$is_rootfs" -eq 1 ] || [ "$target" = "/" ] || [ "$target" = "/overlay" ] ); then
 				[ "$enabled_fsck" -eq 1 ] && {
 					grep -q "$found_device" /proc/swaps || grep -q "$found_device" /proc/mounts || {
 						libmount_fsck "$found_device" "$fstype" "$enabled_fsck"
 					}
 				}								
 	
-				[ "$is_rootfs" -eq 1 ] && [ "$find_rootfs" -eq 1 ] && {
+				if [ "$find_rootfs" = "1" ]; then
+				    if [ "$is_rootfs" -eq 1 ]; then
 					target=/overlay
-				}
+				    elif [ "$target" = "/" ]; then
+					target=/rom
+				    fi
+				else
+				    if [ "$is_rootfs" -eq 1 ] || [ "$target" = "/overlay" ]; then
+					target=/tmp/overlay-disabled
+				    elif [ "$target" = "/" ] || [ "$target" = "/rom" ]; then
+					target=/tmp/whole_root-disabled
+				    fi
+				fi
+				
+                local shid=`echo $fstype | sed -e 's/-//g'`
+                if type fs_insmod_$shid &> /dev/null; then
+                    fs_insmod_$shid
+                fi
+
 				config_create_mount_fstab_entry "$found_device" "$target" "$fstype" "$options" "$enabled" 
 				grep -q "$found_device" /proc/swaps || grep -q "$found_device" /proc/mounts || {
 					[ "$enabled" -eq 1 ] && mkdir -p "$target" && mount "$target" 2>&1 | tee /proc/self/fd/2 | logger -t 'fstab'
@@ -48,8 +65,13 @@
 				
 			fi
 		fi
-		[ "$is_rootfs" -eq 1 ] && [ "$find_rootfs" -eq 1 ] && {
+		[ "$find_rootfs" = "1" ] && {
+		    [ "$target" = "/overlay" ] && {
 			rootfs_found=1
+		    }
+		    [ "$target" = "/rom" ] && {
+			rootfs_found=1
+		    }
 		}
 		return 0	
 	}
Index: package/block-mount/files/50_determine_usb_root
===================================================================
--- package/block-mount/files/50_determine_usb_root	(revision 0)
+++ package/block-mount/files/50_determine_usb_root	(revision 0)
@@ -0,0 +1,88 @@
+#!/bin/sh
+# Copyright (C) 2010 Vertical Communications
+# This is free software, licensed under the GNU General Public License v2.
+# See /LICENSE for more information.
+
+insmod_usb() {
+    insmod scsi_mod max_luns=8
+    insmod sd_mod
+    insmod ehci-hcd
+    insmod usb-storage
+}
+
+find_extroot() {
+	local cfg="$1"
+    local is_rootfs target
+
+    if [ "$extroot_enabled" = 1 ]; then
+        return
+    fi
+    config_get target "$cfg" target
+    if [ "$target" == / ] || [ "$target" == /overlay ]; then
+        extroot_enabled=1
+        return
+    fi
+    config_get_bool is_rootfs "$cfg" is_rootfs
+    if [ "$is_rootfs" = 1 ]; then
+        extroot_enabled=1
+    fi
+}
+
+determine_external_root() {
+	local OLD_UCI_CONFIG_DIR="$UCI_CONFIG_DIR"
+    local extroot_enabled extroot_settle_time
+
+	pi_include /lib/functions/extmount.sh
+	set_jffs_mp
+	determine_root_device
+
+	# extroot requires extroot and fstab config files, therefore
+	# we assume configuration is incomplete and not to be used if either of them
+	# is missing (for jffs versions of these files on squashfs image)
+	if [ "$jffs" = "/tmp/overlay" ] && [ -r "/tmp/overlay/etc/config/fstab" ]; then
+		UCI_CONFIG_DIR="/tmp/overlay/etc/config"
+		ER_IS_SQUASHFS=true
+		ER_OVERLAY_PREFIX="/tmp/overlay"
+	fi
+
+	config_load fstab
+	config_foreach find_extroot mount
+
+    # For squashfs on firstboot root_device will be tmpfs for the ramoverlay,
+    # unless there is a saved config, in which case it will be /dev/root,
+    # however in the case of a saved config, it won't be restored until after
+    # this script, so there won't be a config on the first boot after
+    # flashing a squashfs-based filesystem
+    # For ext2, ramdisk, or jffs2 root filesystems root_device is /dev/root
+    # For squashfs after firstboot, root filesystem is /dev/root
+    # We only use the config from the root or jffs if the root_device is
+    # /dev/root
+	[ $extroot_enabled = 1 ] && [ "$root_device" = "/dev/root" ] && {
+        insmod_usb
+
+        extroot_settle_time=`uci get extroot.@extroot[0].settle_time 2> /dev/null`
+		[ -n "$extroot_settle_time" ] && [ "$extroot_settle_time" -gt 0 ] && {
+			sleep $extroot_settle_time
+		}
+
+	    pi_include /lib/functions/mount.sh
+		config_load fstab
+		config_foreach config_mount_by_section mount 1
+		ER_OVERLAY_ROM="/no-extroot"
+
+		[ "$rootfs_found" = "1" ] && grep -q ' /overlay ' /proc/mounts && {
+			pi_extroot_mount_success=true
+			pi_mount_skip_next=false
+			ER_OVERLAY_ROM="/overlay"
+		}
+		[ "$rootfs_found" = "1" ] && grep -q ' /rom ' /proc/mounts && {
+			pi_extroot_mount_success=true
+			pi_mount_skip_next=false
+			ER_OVERLAY_ROM="/rom"
+		}
+	}
+
+    UCI_CONFIG_DIR="$OLD_UCI_CONFIG_DIR"
+}
+
+boot_hook_add preinit_mount_root determine_external_root
Index: package/block-mount/files/extmount.sh
===================================================================
--- package/block-mount/files/extmount.sh	(revision 0)
+++ package/block-mount/files/extmount.sh	(revision 0)
@@ -0,0 +1,24 @@
+#!/bin/sh
+# Copyright 2010 Vertical Communications
+
+# This is free software, licensed under the GNU General Public License v2.
+# See /LICENSE for more information.
+
+determine_root_device() {
+	root_device="$(mount | grep ' / ' | cut -f1 -d\  | grep -v rootfs )"
+}
+
+set_jffs_mp() {
+	jffs="$(awk '/jffs2/ {print $2}' /proc/mounts)"
+}
+
+pivot_rom() { # <new_root> <old_root>
+	mount -o move /proc $1/proc && \
+	pivot_root $1 $1$2 && {
+		mount -o move $2/dev /dev
+		mount -o move $2/tmp /tmp
+		mount -o move $2/sys /sys 2>&-
+		return 0
+	}
+}
+
Index: package/block-mount/files/filesystem.sh
===================================================================
--- package/block-mount/files/filesystem.sh	(revision 0)
+++ package/block-mount/files/filesystem.sh	(revision 0)
@@ -0,0 +1,30 @@
+# Author: Zhifeng Gu <guzhifeng1979@hotmail.com>
+# Date: 2011/10
+# License: GPL
+
+fs_insmod_ext3() {
+    if grep -q ext3 /proc/modules; then
+        return
+    fi
+    insmod mbcache
+    insmod jbd
+    insmod ext3
+}
+
+fs_insmod_vfat() {
+    if grep -q vfat /proc/modules; then
+        return
+    fi
+    insmod nls_base
+    insmod nls_cp437
+    insmod nls_utf8
+    insmod fat
+    insmod vfat
+}
+
+fs_insmod_ntfs3g() {
+    if grep -q fuse /proc/modules; then
+        return
+    fi
+    insmod fuse
+}
Index: package/block-mount/Config.in
===================================================================
--- package/block-mount/Config.in	(revision 0)
+++ package/block-mount/Config.in	(revision 0)
@@ -0,0 +1,17 @@
+#
+# Copyright (C) 2010 Vertical Communications
+#
+# This is free software, licensed under the GNU General Public License v2.
+# See /LICENSE for more information.
+#
+
+config EXTROOT_SETTLETIME
+	int
+	prompt "Settle time for root block device (s)" if PACKAGE_block-mount
+	default 20
+	help
+		This is the amount of time, in seconds, to wait for the block device
+		the root filesystem is on to become available, after the kernel that
+		modules for the rootfs and device are loaded.
+		
+
Index: package/block-mount/Makefile
===================================================================
--- package/block-mount/Makefile	(revision 27608)
+++ package/block-mount/Makefile	(working copy)
@@ -8,8 +8,8 @@
 include $(TOPDIR)/rules.mk
 
 PKG_NAME:=block-mount
-PKG_VERSION:=0.1.0
-PKG_RELEASE:=2.1
+PKG_VERSION:=0.2.0
+PKG_RELEASE:=6
 
 include $(INCLUDE_DIR)/package.mk
 
@@ -21,22 +21,23 @@
 define Package/block-mount
   $(call Package/block-mount/Default)
   TITLE:=Block device mounting and checking
+  DEPENDS:=@BUSYBOX_CONFIG_BLKID @BUSYBOX_CONFIG_SWAPONOFF
+  MENU:=1
 endef
 
 define Package/block-mount/description
-  Scripts used to mount and check block devices (filesystems and swap)
+  Scripts used to mount and check block devices (filesystems and swap), as well
+  as hotplug scripts to automount and check block devices when hotplug event (e.g.
+  from plugging in a device) occurs.
+  Also includes preinit scripts for mounting a block device as the root filesystem.
+  This allows one to have the root filesystem on devices other than the built in flash
+  device.
 endef
 
-define Package/block-hotplug
-  $(call Package/block-mount/Default)
-  TITLE:=Automount and autocheck block devices
-  DEPENDS:=+block-mount +hotplug2
+define Package/block-mount/config
+	source "$(SOURCE)/Config.in"
 endef
 
-define Package/block-hotplug/description
-  Scripts used to automatically check and mount filesystem and/or swap
-endef
-
 define Build/Compile
 endef
 
@@ -49,19 +50,22 @@
 	$(INSTALL_BIN) ./files/fstab.init $(1)/etc/init.d/fstab
 	$(INSTALL_DIR) $(1)/etc/config
 	$(INSTALL_DATA) ./files/fstab.config $(1)/etc/config/fstab
-	$(INSTALL_DIR) $(1)/lib/functions
+	$(INSTALL_DIR) $(1)/lib/functions/fsck
 	$(INSTALL_DATA) ./files/mount.sh $(1)/lib/functions/
 	$(INSTALL_DATA) ./files/fsck.sh $(1)/lib/functions/
 	$(INSTALL_DATA) ./files/block.sh $(1)/lib/functions/
-endef
-
-define Package/block-hotplug/install
+	$(INSTALL_DATA) ./files/filesystem.sh $(1)/lib/functions/
 	$(INSTALL_DIR) $(1)/etc/hotplug.d/block
 	$(INSTALL_DATA) ./files/10-swap $(1)/etc/hotplug.d/block/
 	$(INSTALL_DATA) ./files/20-fsck $(1)/etc/hotplug.d/block/
 	$(INSTALL_DATA) ./files/40-mount $(1)/etc/hotplug.d/block/
+	$(INSTALL_DATA) ./files/extmount.sh $(1)/lib/functions/
+	$(INSTALL_DIR) $(1)/lib/preinit
+	$(INSTALL_DATA) ./files/50_determine_usb_root $(1)/lib/preinit/
+	$(INSTALL_DATA) ./files/55_determine_extroot_sysupgrade $(1)/lib/preinit/
+	$(INSTALL_DATA) ./files/60_pivot_usb_root $(1)/lib/preinit/
+	$(INSTALL_DATA) ./files/extroot $(1)/etc/config/
+	$(INSTALL_DIR) $(1)/overlay
 endef
 
 $(eval $(call BuildPackage,block-mount))
-$(eval $(call BuildPackage,block-hotplug))
-
Index: package/block-extroot/files/55_determine_extroot_sysupgrade
===================================================================
--- package/block-extroot/files/55_determine_extroot_sysupgrade	(revision 27608)
+++ package/block-extroot/files/55_determine_extroot_sysupgrade	(working copy)
@@ -1,57 +0,0 @@
-#!/bin/sh
-# Copyright (C) 2010 Daniel Dickinson
-# This is free software, licensed under the GNU General Public License v2.
-# See /LICENSE for more information.
-
-
-check_set_md5sum() {
-	local er_md5sum_file
-	er_md5sum_file="${ER_OVERLAY_PREFIX}/.extroot.md5sum"
-
-	local er_extroot_md5sum
-	if [ -f $md5sum_file ]; then
-		er_extroot_md5sum="$(cat $er_md5sum_file)"
-	fi
-
-	local er_overlay_file="/overlay/etc/extroot.md5sum"
-
-	local er_extroot_overlay_md5sum
-	if [ -f "$er_overlay_file" ]; then
-		er_extroot_overlay_md5sum="$(cat $er_overlay_file)"
-	fi
-
-	if [ -z "$er_extroot_overlay_md5sum" ]; then
-		cat $er_md5sum_file >$er_overlay_file
-	elif [ "$er_extroot_overlay_md5sum" != "$er_extroot_md5sum" ]; then
-		pi_extroot_mount_success="false"
-		mkdir -p /tmp/overlay-disabled
-		mount --move /overlay /tmp/overlay-disabled
-	fi
-}
-
-set_jffs_md5sum() {
-	# We do this anytime block-extroot exists, even on the first boot with
-	# no extroot defined.
-
-	local er_md5sum_file
-	er_md5sum_file="${ER_OVERLAY_PREFIX}/.extroot.md5sum"
-
-	local er_extroot_md5sum
-	if [ -f $er_md5sum_file ]; then
-		er_extroot_md5sum="$(cat $er_md5sum_file)"
-	fi
-	if [ -z "$er_extroot_md5sum" ]; then
-		dd if=/dev/urandom count=32 bs=1k 2>/dev/null | md5sum | cut -f1 -d\  >$er_md5sum_file
-	fi
-}
-
-determine_extroot_sysupgrade() {
-	check_skip || set_jffs_md5sum
-
-	check_skip || [ "$pi_extroot_mount_success" != "true" ] || {
-		check_set_md5sum
-	}
-}
-
-boot_hook_add preinit_mount_root determine_extroot_sysupgrade
-
Index: package/block-extroot/files/60_pivot_usb_root
===================================================================
--- package/block-extroot/files/60_pivot_usb_root	(revision 27608)
+++ package/block-extroot/files/60_pivot_usb_root	(working copy)
@@ -1,20 +0,0 @@
-#!/bin/sh
-# Copyright (C) 2010 Vertical Communications
-
-# This is free software, licensed under the GNU General Public License v2.
-# See /LICENSE for more information.
-
-# Determine if we are requested to mount external root
-
-external_root_pivot() {
-	check_skip || [ "$pi_extroot_mount_success" != "true" ] || {
-		echo "switching to external rootfs"
-		if [ "$ER_IS_SQUASHFS" = "true" ]; then
-			umount /tmp/overlay
-		fi
-		mount -o remount,ro / && fopivot /overlay /rom && pi_mount_skip_next=true
-	}
-}
-
-boot_hook_add preinit_mount_root external_root_pivot
-
Index: package/block-extroot/files/50_determine_usb_root
===================================================================
--- package/block-extroot/files/50_determine_usb_root	(revision 27608)
+++ package/block-extroot/files/50_determine_usb_root	(working copy)
@@ -1,50 +0,0 @@
-#!/bin/sh
-# Copyright (C) 2010 Vertical Communications
-# This is free software, licensed under the GNU General Public License v2.
-# See /LICENSE for more information.
-
-
-determine_external_root() {
-	pi_include /lib/functions/extmount.sh
-	pi_include /lib/functions/mount.sh
-
-	local OLD_UCI_CONFIG_DIR="$UCI_CONFIG_DIR"
-	set_jffs_mp
-	determine_root_device
-
-	# extroot requires extroot and fstab config files, therefore 
-	# we assume configuration is incomplete and not to be used if either of them
-	# is missing (for jffs versions of these files on squashfs image)
-	if [ "$jffs" = "/tmp/overlay" ] && [ -r "/tmp/overlay/etc/config/fstab" ]; then
-		UCI_CONFIG_DIR="/tmp/overlay/etc/config"
-		ER_IS_SQUASHFS=true
-		ER_OVERLAY_PREFIX="/tmp/overlay"
-	fi
-
-	# For squashfs on firstboot root_device will be tmpfs for the ramoverlay,
-	# unless there is a saved config, in which case it will be /dev/root,
-	# however in the case of a saved config, it won't be restored until after
-	# this script, so there won't be a config on the first boot after
-	# flashing a squashfs-based filesystem
-	# For ext2, ramdisk, or jffs2 root filesystems root_device is /dev/root
-	# For squashfs after firstboot, root filesystem is /dev/root	
-	# We only use the config from the root or jffs if the root_device is 
-	# /dev/root
-	[ "$root_device" = "/dev/root" ] && {
-		er_load_modules
-		[ -n "$extroot_settle_time" ] && [ "$extroot_settle_time" -gt 0 ] && {
-			sleep $extroot_settle_time
-		} 
-		config_load fstab
-		config_foreach config_mount_by_section mount 1
-		
-		[ "$rootfs_found" = "1" ] && grep -q ' /overlay ' /proc/mounts && { 
-			pi_extroot_mount_success=true
-			pi_mount_skip_next=false
-		}
-	}
-	UCI_CONFIG_DIR="$OLD_UCI_CONFIG_DIR"
-}
-
-boot_hook_add preinit_mount_root determine_external_root
-
Index: package/block-extroot/files/extmount.sh
===================================================================
--- package/block-extroot/files/extmount.sh	(revision 27608)
+++ package/block-extroot/files/extmount.sh	(working copy)
@@ -1,26 +0,0 @@
-#!/bin/sh
-# Copyright 2010 Vertical Communications
-
-# This is free software, licensed under the GNU General Public License v2.
-# See /LICENSE for more information.
-
-determine_root_device() {
-	root_device="$(mount | grep ' / ' | cut -f1 -d\  | grep -v rootfs )"
-}
-
-set_jffs_mp() {
-	jffs="$(awk '/jffs2/ {print $2}' /proc/mounts)"
-}
-
-er_load_modules() {
-	mkdir -p /tmp/extroot_modules/modules.d
-	mkdir -p /tmp/extroot_modules/modules
-	ln -sf /etc/modules.d/* /tmp/overlay/etc/modules.d/* /tmp/extroot_modules/modules.d
-	ln -sf /lib/modules/*/* /tmp/overlay/lib/modules/*/* /tmp/extroot_modules/modules
-    	local modules="$(grep -l '# May be required for rootfs' /tmp/extroot_modules/modules.d/*)"
-	cd /tmp/extroot_modules/modules && {
-		cat $modules | sed -e 's/^\([^#].*\)/insmod \.\/\1.ko/'| sh 2>&- || :
-	}
-	rm -rf /tmp/extroot_modules
-}
-
Index: package/block-extroot/Config.in
===================================================================
--- package/block-extroot/Config.in	(revision 27608)
+++ package/block-extroot/Config.in	(working copy)
@@ -1,17 +0,0 @@
-#
-# Copyright (C) 2010 Vertical Communications
-#
-# This is free software, licensed under the GNU General Public License v2.
-# See /LICENSE for more information.
-#
-
-config EXTROOT_SETTLETIME
-	int
-	prompt "Settle time for root block device (s)" if PACKAGE_block-extroot
-	default 20
-	help
-		This is the amount of time, in seconds, to wait for the block device
-		the root filesystem is on to become available, after the kernel that
-		modules for the rootfs and device are loaded.
-		
-
Index: package/block-extroot/Makefile
===================================================================
--- package/block-extroot/Makefile	(revision 27608)
+++ package/block-extroot/Makefile	(working copy)
@@ -1,64 +0,0 @@
-#
-# Copyright (C) 2009-2010 OpenWrt.org
-# Copyright (C) 2010 Vertical Communications
-#
-# This is free software, licensed under the GNU General Public License v2.
-# See /LICENSE for more information.
-#
-
-include $(TOPDIR)/rules.mk
-
-PKG_NAME:=block-extroot
-PKG_VERSION:=0.0.1
-PKG_RELEASE:=2
-
-PKG_BUILD_DIR := $(BUILD_DIR)/$(PKG_NAME)
-
-include $(INCLUDE_DIR)/package.mk
-
-define Package/block-extroot/Default
-  SECTION:=base
-  CATEGORY:=Base system
-  TITLE:=root filesystem on secondary storage
-endef
-
-define Package/block-extroot
-  $(call Package/block-extroot/Default)
-  MENU:=1
-  DEPENDS:=+block-mount @PACKAGE_kmod-ide-core||PACKAGE_kmod-ata-core||PACKAGE_kmod-usb-storage||PACKAGE_kmod-mmc||PACKAGE_kmod-broadcom-sdhc
-endef
-
-define Package/block-extroot/config
-	source "$(SOURCE)/Config.in"
-endef
-
-define Package/block-extroot/description
-  Based on the moduluarized preinit and firstboot, adds the option to have
-  the root filesystem on storage other than the jffs or the boot root device.
-  For a squashfs image this package must be installed into the image, not as
-  a package to add later.
-endef
-
-define Build/Prepare
-endef
-
-define Build/Configure
-endef
-
-define Build/Compile
-endef
-
-define Package/block-extroot/install
-	$(INSTALL_DIR) $(1)/lib/functions
-	$(INSTALL_DATA) ./files/extmount.sh $(1)/lib/functions/
-	$(INSTALL_DIR) $(1)/lib/preinit
-	$(INSTALL_DATA) ./files/50_determine_usb_root $(1)/lib/preinit/
-	$(INSTALL_DATA) ./files/55_determine_extroot_sysupgrade $(1)/lib/preinit/
-	$(INSTALL_DATA) ./files/60_pivot_usb_root $(1)/lib/preinit/
-	$(INSTALL_DIR) $(1)/lib/preinit
-	echo "extroot_settle_time=\"$(CONFIG_EXTROOT_SETTLETIME)\"" >$(1)/lib/preinit/00_extroot.conf
-	$(INSTALL_DIR) $(1)/overlay
-endef
-
-$(eval $(call BuildPackage,block-extroot))
-
