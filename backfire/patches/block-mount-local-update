Index: backfire/package/block-mount/files/50_determine_usb_root
===================================================================
--- backfire.orig/package/block-mount/files/50_determine_usb_root
+++ backfire/package/block-mount/files/50_determine_usb_root
@@ -3,16 +3,67 @@
 # This is free software, licensed under the GNU General Public License v2.
 # See /LICENSE for more information.
 
+insmod_usb() {
+    insmod scsi_mod max_luns=8
+    insmod sd_mod
+    insmod ehci-hcd
+    insmod usb-storage
+}
 
-determine_external_root() {
-	pi_include /lib/functions/extmount.sh
-	pi_include /lib/functions/mount.sh
+is_rootfs_mount() {
+    config_get target "$cfg" target
+    [ -n "$target" ] && ( [ "$target" == / ] || [ "$target" == /overlay ] ) && {
+        return
+    }
+    config_get_bool is_rootfs "$cfg" is_rootfs
+    [ -n "$is_rootfs" ] && [ $is_rootfs == 1 ] && {
+        return
+    }
+    return 1
+}
+
+do_rootfs_mount() {
+	local cfg="$1"
+    if ! is_rootfs_mount; then
+        return
+    fi
+    config_mount_by_section "$cfg" 1
+}
+
+find_rootfs_mount() {
+	local cfg="$1"
+    local is_rootfs target blkid
+
+    if ! is_rootfs_mount; then
+        return
+    fi
+    
+    config_get blkid "$cfg" uuid
+    if [ -n "$blkid" ]; then
+        extroot_blkid="UUID=\"$blkid\""
+        return
+    fi
+    config_get blkid "$cfg" label
+    if [ -n "$blkid" ]; then
+        extroot_blkid="LABEL=\"$blkid\""
+        return
+    fi
+    config_get blkid "$cfg" device
+    if [ -n "$blkid" ]; then
+        extroot_blkid="^$blkid:"
+    fi
+}
 
+determine_external_root() {
 	local OLD_UCI_CONFIG_DIR="$UCI_CONFIG_DIR"
+    local waiting_secends=0 waiting_step=3
+    local extroot_blkid max_settle_time 
+
+	pi_include /lib/functions/extmount.sh
 	set_jffs_mp
 	determine_root_device
 
-	# extroot requires extroot and fstab config files, therefore 
+	# extroot requires extroot and fstab config files, therefore
 	# we assume configuration is incomplete and not to be used if either of them
 	# is missing (for jffs versions of these files on squashfs image)
 	if [ "$jffs" = "/tmp/overlay" ] && [ -r "/tmp/overlay/etc/config/fstab" ]; then
@@ -21,37 +72,54 @@
 		ER_OVERLAY_PREFIX="/tmp/overlay"
 	fi
 
-	# For squashfs on firstboot root_device will be tmpfs for the ramoverlay,
-	# unless there is a saved config, in which case it will be /dev/root,
-	# however in the case of a saved config, it won't be restored until after
-	# this script, so there won't be a config on the first boot after
-	# flashing a squashfs-based filesystem
-	# For ext2, ramdisk, or jffs2 root filesystems root_device is /dev/root
-	# For squashfs after firstboot, root filesystem is /dev/root	
-	# We only use the config from the root or jffs if the root_device is 
-	# /dev/root
-	[ "$root_device" = "/dev/root" ] && {
-		er_load_modules
-		[ -n "$extroot_settle_time" ] && [ "$extroot_settle_time" -gt 0 ] && {
-			sleep $extroot_settle_time
-		} 
-		config_load fstab
-		config_foreach config_mount_by_section mount 1
+	config_load fstab
+	config_foreach find_rootfs_mount mount
+
+    # For squashfs on firstboot root_device will be tmpfs for the ramoverlay,
+    # unless there is a saved config, in which case it will be /dev/root,
+    # however in the case of a saved config, it won't be restored until after
+    # this script, so there won't be a config on the first boot after
+    # flashing a squashfs-based filesystem
+    # For ext2, ramdisk, or jffs2 root filesystems root_device is /dev/root
+    # For squashfs after firstboot, root filesystem is /dev/root
+    # We only use the config from the root or jffs if the root_device is
+    # /dev/root
+	[ -n "$extroot_blkid" ] && [ "$root_device" = "/dev/root" ] && {
+        insmod_usb
+
+        max_settle_time=`uci get extroot.@extroot[0].max_settle_time 2> /dev/null`
+		if [ -z "$max_settle_time" ] || [ ! "$max_settle_time" -gt 0 2>/dev/null ]; then
+			max_settle_time=30
+		fi
+
+        # wait the root device to be populated
+        while ! blkid | grep -q $extroot_blkid
+        do
+            waiting_secends=$(($waiting_secends + $waiting_step))
+            if [ $waiting_secends -gt $max_settle_time ]; then
+                break
+            fi
+            sleep $waiting_step
+        done
+        
+	    pi_include /lib/functions/mount.sh
+		config_foreach do_rootfs_mount mount
 		ER_OVERLAY_ROM="/no-extroot"
-		
-		[ "$rootfs_found" = "1" ] && grep -q ' /overlay ' /proc/mounts && { 
+
+		[ "$rootfs_found" = "1" ] && grep -q ' /overlay ' /proc/mounts && {
 			pi_extroot_mount_success=true
 			pi_mount_skip_next=false
 			ER_OVERLAY_ROM="/overlay"
 		}
-		[ "$rootfs_found" = "1" ] && grep -q ' /rom ' /proc/mounts && { 
+		[ "$rootfs_found" = "1" ] && grep -q ' /rom ' /proc/mounts && {
 			pi_extroot_mount_success=true
 			pi_mount_skip_next=false
 			ER_OVERLAY_ROM="/rom"
 		}
 	}
-	UCI_CONFIG_DIR="$OLD_UCI_CONFIG_DIR"
+
+    UCI_CONFIG_DIR="$OLD_UCI_CONFIG_DIR"
 }
 
+pi_include /lib/functions/extfs.sh
 boot_hook_add preinit_mount_root determine_external_root
-
Index: backfire/package/block-mount/files/block.sh
===================================================================
--- backfire.orig/package/block-mount/files/block.sh
+++ backfire/package/block-mount/files/block.sh
@@ -225,8 +225,10 @@
 		return 0	
 	}
 	config_foreach config_get_mount mount "$msbd_device"
-	[ -n "$msbd_mount_device" ] && config_create_mount_fstab_entry "$msbd_mount_device" "$msbd_target" "$msbd_fstype" "$msbd_options" "$msbd_enabled" 
-	mount_dev_section_cb "$msbd_mount_cfg" "$msbd_target" "$msbd_mount_device" "$msbd_fstype" "$msbd_options" "$msbd_enabled" "$msbd_enabled_fsck" "$msbd_uuid" "$msbd_label" "$msbd_is_rootfs"
+	[ "$msbd_is_rootfs" -gt 0 ] || {
+		[ -n "$msbd_mount_device" ] && config_create_mount_fstab_entry "$msbd_mount_device" "$msbd_target" "$msbd_fstype" "$msbd_options" "$msbd_enabled" 
+		mount_dev_section_cb "$msbd_mount_cfg" "$msbd_target" "$msbd_mount_device" "$msbd_fstype" "$msbd_options" "$msbd_enabled" "$msbd_enabled_fsck" "$msbd_uuid" "$msbd_label" "$msbd_is_rootfs"
+	}
 	reset_block_cb
 }
 
Index: backfire/package/block-mount/files/extfs.sh
===================================================================
--- /dev/null
+++ backfire/package/block-mount/files/extfs.sh
@@ -0,0 +1,22 @@
+# Author: Zhifeng Gu <guzhifeng1979@hotmail.com>
+# Date: 2011/10
+# License: GPL
+
+extfs_ext2() {
+    insmod mbcache
+    insmod ext2
+}
+
+extfs_ext3() {
+    insmod mbcache
+    insmod jbd
+    insmod ext3
+}
+
+extfs_vfat() {
+    insmod nls_base
+    insmod nls_cp437
+    insmod nls_utf8
+    insmod fat
+    insmod vfat
+}
Index: backfire/package/block-mount/files/extmount.sh
===================================================================
--- backfire.orig/package/block-mount/files/extmount.sh
+++ backfire/package/block-mount/files/extmount.sh
@@ -12,18 +12,6 @@
 	jffs="$(awk '/jffs2/ {print $2}' /proc/mounts)"
 }
 
-er_load_modules() {
-	mkdir -p /tmp/extroot_modules/modules.d
-	mkdir -p /tmp/extroot_modules/modules
-	ln -sf /etc/modules.d/* /tmp/overlay/etc/modules.d/* /tmp/extroot_modules/modules.d
-	ln -sf /lib/modules/*/* /tmp/overlay/lib/modules/*/* /tmp/extroot_modules/modules
-    	local modules="$(grep -l '# May be required for rootfs' /tmp/extroot_modules/modules.d/* 2>/dev/null)"
-	cd /tmp/extroot_modules/modules && [ -n "$modules" ] && {
-		cat $modules | sed -e 's/^\([^#].*\)/insmod \.\/\1.ko/'| sh 2>&- || :
-	}
-	rm -rf /tmp/extroot_modules
-}
-
 pivot_rom() { # <new_root> <old_root>
 	mount -o move /proc $1/proc && \
 	pivot_root $1 $1$2 && {
Index: backfire/package/block-mount/files/extroot
===================================================================
--- /dev/null
+++ backfire/package/block-mount/files/extroot
@@ -0,0 +1,2 @@
+config extroot
+	option max_settle_time	30
Index: backfire/package/block-mount/files/fstab.config
===================================================================
--- backfire.orig/package/block-mount/files/fstab.config
+++ backfire/package/block-mount/files/fstab.config
@@ -9,8 +9,8 @@
 config mount
 	option target	/home
 	option device	/dev/sda1
-	option fstype	ext4
-	option options	rw,sync
+	option fstype	ext3
+	option options	sync,noatime
 	option enabled	0
 	option enabled_fsck 0
 
Index: backfire/package/block-mount/files/mount.sh
===================================================================
--- backfire.orig/package/block-mount/files/mount.sh
+++ backfire/package/block-mount/files/mount.sh
@@ -48,10 +48,14 @@
 				    if [ "$is_rootfs" -eq 1 ] || [ "$target" = "/overlay" ]; then
 					target=/tmp/overlay-disabled
 				    elif [ "$target" = "/" ] || [ "$target" = "/rom" ]; then
-					target="/tmp/whole_root-disabled"
+					target=/tmp/whole_root-disabled
 				    fi
 				fi
 				
+                if type extfs_$fstype &> /dev/null; then
+                    extfs_$fstype
+                fi
+
 				config_create_mount_fstab_entry "$found_device" "$target" "$fstype" "$options" "$enabled" 
 				grep -q "$found_device" /proc/swaps || grep -q "$found_device" /proc/mounts || {
 					[ "$enabled" -eq 1 ] && mkdir -p "$target" && mount "$target" 2>&1 | tee /proc/self/fd/2 | logger -t 'fstab'
Index: backfire/package/block-mount/Makefile
===================================================================
--- backfire.orig/package/block-mount/Makefile
+++ backfire/package/block-mount/Makefile
@@ -1,5 +1,5 @@
 #
-# Copyright (C) 2006-2009 OpenWrt.org
+# Copyright (C) 2006-2011 OpenWrt.org
 # Copyright 2010 Vertical Communications
 # This is free software, licensed under the GNU General Public License v2.
 # See /LICENSE for more information.
@@ -9,7 +9,7 @@
 
 PKG_NAME:=block-mount
 PKG_VERSION:=0.2.0
-PKG_RELEASE:=6
+PKG_RELEASE:=7
 
 include $(INCLUDE_DIR)/package.mk
 
@@ -21,7 +21,7 @@
 define Package/block-mount
   $(call Package/block-mount/Default)
   TITLE:=Block device mounting and checking
-  DEPENDS:= +blkid +swap-utils 
+  DEPENDS:=@BUSYBOX_CONFIG_BLKID @BUSYBOX_CONFIG_SWAPONOFF
   MENU:=1
 endef
 
@@ -43,6 +43,7 @@
 
 define Package/block-mount/conffiles
 /etc/config/fstab
+/etc/config/extroot
 endef
 
 define Package/block-mount/install
@@ -54,16 +55,17 @@
 	$(INSTALL_DATA) ./files/mount.sh $(1)/lib/functions/
 	$(INSTALL_DATA) ./files/fsck.sh $(1)/lib/functions/
 	$(INSTALL_DATA) ./files/block.sh $(1)/lib/functions/
+	$(INSTALL_DATA) ./files/extmount.sh $(1)/lib/functions/
+	$(INSTALL_DATA) ./files/extfs.sh $(1)/lib/functions/
 	$(INSTALL_DIR) $(1)/etc/hotplug.d/block
 	$(INSTALL_DATA) ./files/10-swap $(1)/etc/hotplug.d/block/
 	$(INSTALL_DATA) ./files/20-fsck $(1)/etc/hotplug.d/block/
 	$(INSTALL_DATA) ./files/40-mount $(1)/etc/hotplug.d/block/
-	$(INSTALL_DATA) ./files/extmount.sh $(1)/lib/functions/
 	$(INSTALL_DIR) $(1)/lib/preinit
 	$(INSTALL_DATA) ./files/50_determine_usb_root $(1)/lib/preinit/
 	$(INSTALL_DATA) ./files/55_determine_extroot_sysupgrade $(1)/lib/preinit/
 	$(INSTALL_DATA) ./files/60_pivot_usb_root $(1)/lib/preinit/
-	echo "extroot_settle_time=\"$(CONFIG_EXTROOT_SETTLETIME)\"" >$(1)/lib/preinit/00_extroot.conf
+	$(INSTALL_DATA) ./files/extroot $(1)/etc/config/
 	$(INSTALL_DIR) $(1)/overlay
 endef
 
